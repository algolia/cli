// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/algolia/algoliasearch-client-go/v3/algolia/search (interfaces: IndexInterface)

// Package mock_search is a generated GoMock package.
package mock_search

import (
	reflect "reflect"

	search "github.com/algolia/algoliasearch-client-go/v3/algolia/search"
	wait "github.com/algolia/algoliasearch-client-go/v3/algolia/wait"
	gomock "github.com/golang/mock/gomock"
)

// MockIndexInterface is a mock of IndexInterface interface.
type MockIndexInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIndexInterfaceMockRecorder
}

// MockIndexInterfaceMockRecorder is the mock recorder for MockIndexInterface.
type MockIndexInterfaceMockRecorder struct {
	mock *MockIndexInterface
}

// NewMockIndexInterface creates a new mock instance.
func NewMockIndexInterface(ctrl *gomock.Controller) *MockIndexInterface {
	mock := &MockIndexInterface{ctrl: ctrl}
	mock.recorder = &MockIndexInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexInterface) EXPECT() *MockIndexInterfaceMockRecorder {
	return m.recorder
}

// Batch mocks base method.
func (m *MockIndexInterface) Batch(arg0 []search.BatchOperation, arg1 ...interface{}) (search.BatchRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Batch", varargs...)
	ret0, _ := ret[0].(search.BatchRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Batch indicates an expected call of Batch.
func (mr *MockIndexInterfaceMockRecorder) Batch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockIndexInterface)(nil).Batch), varargs...)
}

// BrowseObjects mocks base method.
func (m *MockIndexInterface) BrowseObjects(arg0 ...interface{}) (*search.ObjectIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BrowseObjects", varargs...)
	ret0, _ := ret[0].(*search.ObjectIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrowseObjects indicates an expected call of BrowseObjects.
func (mr *MockIndexInterfaceMockRecorder) BrowseObjects(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BrowseObjects", reflect.TypeOf((*MockIndexInterface)(nil).BrowseObjects), arg0...)
}

// BrowseRules mocks base method.
func (m *MockIndexInterface) BrowseRules(arg0 ...interface{}) (*search.RuleIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BrowseRules", varargs...)
	ret0, _ := ret[0].(*search.RuleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrowseRules indicates an expected call of BrowseRules.
func (mr *MockIndexInterfaceMockRecorder) BrowseRules(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BrowseRules", reflect.TypeOf((*MockIndexInterface)(nil).BrowseRules), arg0...)
}

// BrowseSynonyms mocks base method.
func (m *MockIndexInterface) BrowseSynonyms(arg0 ...interface{}) (*search.SynonymIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BrowseSynonyms", varargs...)
	ret0, _ := ret[0].(*search.SynonymIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrowseSynonyms indicates an expected call of BrowseSynonyms.
func (mr *MockIndexInterfaceMockRecorder) BrowseSynonyms(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BrowseSynonyms", reflect.TypeOf((*MockIndexInterface)(nil).BrowseSynonyms), arg0...)
}

// ClearObjects mocks base method.
func (m *MockIndexInterface) ClearObjects(arg0 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearObjects", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearObjects indicates an expected call of ClearObjects.
func (mr *MockIndexInterfaceMockRecorder) ClearObjects(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearObjects", reflect.TypeOf((*MockIndexInterface)(nil).ClearObjects), arg0...)
}

// ClearRules mocks base method.
func (m *MockIndexInterface) ClearRules(arg0 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearRules", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearRules indicates an expected call of ClearRules.
func (mr *MockIndexInterfaceMockRecorder) ClearRules(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRules", reflect.TypeOf((*MockIndexInterface)(nil).ClearRules), arg0...)
}

// ClearSynonyms mocks base method.
func (m *MockIndexInterface) ClearSynonyms(arg0 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearSynonyms", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearSynonyms indicates an expected call of ClearSynonyms.
func (mr *MockIndexInterfaceMockRecorder) ClearSynonyms(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSynonyms", reflect.TypeOf((*MockIndexInterface)(nil).ClearSynonyms), arg0...)
}

// Delete mocks base method.
func (m *MockIndexInterface) Delete(arg0 ...interface{}) (search.DeleteTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(search.DeleteTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIndexInterfaceMockRecorder) Delete(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIndexInterface)(nil).Delete), arg0...)
}

// DeleteBy mocks base method.
func (m *MockIndexInterface) DeleteBy(arg0 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBy", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBy indicates an expected call of DeleteBy.
func (mr *MockIndexInterfaceMockRecorder) DeleteBy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBy", reflect.TypeOf((*MockIndexInterface)(nil).DeleteBy), arg0...)
}

// DeleteObject mocks base method.
func (m *MockIndexInterface) DeleteObject(arg0 string, arg1 ...interface{}) (search.DeleteTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObject", varargs...)
	ret0, _ := ret[0].(search.DeleteTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockIndexInterfaceMockRecorder) DeleteObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockIndexInterface)(nil).DeleteObject), varargs...)
}

// DeleteObjects mocks base method.
func (m *MockIndexInterface) DeleteObjects(arg0 []string, arg1 ...interface{}) (search.BatchRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjects", varargs...)
	ret0, _ := ret[0].(search.BatchRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockIndexInterfaceMockRecorder) DeleteObjects(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockIndexInterface)(nil).DeleteObjects), varargs...)
}

// DeleteRule mocks base method.
func (m *MockIndexInterface) DeleteRule(arg0 string, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRule", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockIndexInterfaceMockRecorder) DeleteRule(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockIndexInterface)(nil).DeleteRule), varargs...)
}

// DeleteSynonym mocks base method.
func (m *MockIndexInterface) DeleteSynonym(arg0 string, arg1 ...interface{}) (search.DeleteTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSynonym", varargs...)
	ret0, _ := ret[0].(search.DeleteTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSynonym indicates an expected call of DeleteSynonym.
func (mr *MockIndexInterfaceMockRecorder) DeleteSynonym(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSynonym", reflect.TypeOf((*MockIndexInterface)(nil).DeleteSynonym), varargs...)
}

// Exists mocks base method.
func (m *MockIndexInterface) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIndexInterfaceMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIndexInterface)(nil).Exists))
}

// GetAppID mocks base method.
func (m *MockIndexInterface) GetAppID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppID indicates an expected call of GetAppID.
func (mr *MockIndexInterfaceMockRecorder) GetAppID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppID", reflect.TypeOf((*MockIndexInterface)(nil).GetAppID))
}

// GetName mocks base method.
func (m *MockIndexInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIndexInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIndexInterface)(nil).GetName))
}

// GetObject mocks base method.
func (m *MockIndexInterface) GetObject(arg0 string, arg1 interface{}, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetObject indicates an expected call of GetObject.
func (mr *MockIndexInterfaceMockRecorder) GetObject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockIndexInterface)(nil).GetObject), varargs...)
}

// GetObjects mocks base method.
func (m *MockIndexInterface) GetObjects(arg0 []string, arg1 interface{}, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjects", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetObjects indicates an expected call of GetObjects.
func (mr *MockIndexInterfaceMockRecorder) GetObjects(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjects", reflect.TypeOf((*MockIndexInterface)(nil).GetObjects), varargs...)
}

// GetRule mocks base method.
func (m *MockIndexInterface) GetRule(arg0 string, arg1 ...interface{}) (search.Rule, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRule", varargs...)
	ret0, _ := ret[0].(search.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockIndexInterfaceMockRecorder) GetRule(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockIndexInterface)(nil).GetRule), varargs...)
}

// GetSettings mocks base method.
func (m *MockIndexInterface) GetSettings(arg0 ...interface{}) (search.Settings, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettings", varargs...)
	ret0, _ := ret[0].(search.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockIndexInterfaceMockRecorder) GetSettings(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockIndexInterface)(nil).GetSettings), arg0...)
}

// GetStatus mocks base method.
func (m *MockIndexInterface) GetStatus(arg0 int64, arg1 ...interface{}) (search.TaskStatusRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatus", varargs...)
	ret0, _ := ret[0].(search.TaskStatusRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockIndexInterfaceMockRecorder) GetStatus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockIndexInterface)(nil).GetStatus), varargs...)
}

// GetSynonym mocks base method.
func (m *MockIndexInterface) GetSynonym(arg0 string, arg1 ...interface{}) (search.Synonym, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSynonym", varargs...)
	ret0, _ := ret[0].(search.Synonym)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSynonym indicates an expected call of GetSynonym.
func (mr *MockIndexInterfaceMockRecorder) GetSynonym(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSynonym", reflect.TypeOf((*MockIndexInterface)(nil).GetSynonym), varargs...)
}

// PartialUpdateObject mocks base method.
func (m *MockIndexInterface) PartialUpdateObject(arg0 interface{}, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartialUpdateObject", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialUpdateObject indicates an expected call of PartialUpdateObject.
func (mr *MockIndexInterfaceMockRecorder) PartialUpdateObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateObject", reflect.TypeOf((*MockIndexInterface)(nil).PartialUpdateObject), varargs...)
}

// PartialUpdateObjects mocks base method.
func (m *MockIndexInterface) PartialUpdateObjects(arg0 interface{}, arg1 ...interface{}) (search.GroupBatchRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartialUpdateObjects", varargs...)
	ret0, _ := ret[0].(search.GroupBatchRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialUpdateObjects indicates an expected call of PartialUpdateObjects.
func (mr *MockIndexInterfaceMockRecorder) PartialUpdateObjects(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateObjects", reflect.TypeOf((*MockIndexInterface)(nil).PartialUpdateObjects), varargs...)
}

// ReplaceAllObjects mocks base method.
func (m *MockIndexInterface) ReplaceAllObjects(arg0 interface{}, arg1 ...interface{}) (*wait.Group, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplaceAllObjects", varargs...)
	ret0, _ := ret[0].(*wait.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceAllObjects indicates an expected call of ReplaceAllObjects.
func (mr *MockIndexInterfaceMockRecorder) ReplaceAllObjects(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAllObjects", reflect.TypeOf((*MockIndexInterface)(nil).ReplaceAllObjects), varargs...)
}

// ReplaceAllRules mocks base method.
func (m *MockIndexInterface) ReplaceAllRules(arg0 []search.Rule, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplaceAllRules", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceAllRules indicates an expected call of ReplaceAllRules.
func (mr *MockIndexInterfaceMockRecorder) ReplaceAllRules(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAllRules", reflect.TypeOf((*MockIndexInterface)(nil).ReplaceAllRules), varargs...)
}

// ReplaceAllSynonyms mocks base method.
func (m *MockIndexInterface) ReplaceAllSynonyms(arg0 []search.Synonym, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplaceAllSynonyms", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceAllSynonyms indicates an expected call of ReplaceAllSynonyms.
func (mr *MockIndexInterfaceMockRecorder) ReplaceAllSynonyms(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAllSynonyms", reflect.TypeOf((*MockIndexInterface)(nil).ReplaceAllSynonyms), varargs...)
}

// SaveObject mocks base method.
func (m *MockIndexInterface) SaveObject(arg0 interface{}, arg1 ...interface{}) (search.SaveObjectRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveObject", varargs...)
	ret0, _ := ret[0].(search.SaveObjectRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveObject indicates an expected call of SaveObject.
func (mr *MockIndexInterfaceMockRecorder) SaveObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObject", reflect.TypeOf((*MockIndexInterface)(nil).SaveObject), varargs...)
}

// SaveObjects mocks base method.
func (m *MockIndexInterface) SaveObjects(arg0 interface{}, arg1 ...interface{}) (search.GroupBatchRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveObjects", varargs...)
	ret0, _ := ret[0].(search.GroupBatchRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveObjects indicates an expected call of SaveObjects.
func (mr *MockIndexInterfaceMockRecorder) SaveObjects(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObjects", reflect.TypeOf((*MockIndexInterface)(nil).SaveObjects), varargs...)
}

// SaveRule mocks base method.
func (m *MockIndexInterface) SaveRule(arg0 search.Rule, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRule", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRule indicates an expected call of SaveRule.
func (mr *MockIndexInterfaceMockRecorder) SaveRule(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRule", reflect.TypeOf((*MockIndexInterface)(nil).SaveRule), varargs...)
}

// SaveRules mocks base method.
func (m *MockIndexInterface) SaveRules(arg0 []search.Rule, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRules", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRules indicates an expected call of SaveRules.
func (mr *MockIndexInterfaceMockRecorder) SaveRules(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRules", reflect.TypeOf((*MockIndexInterface)(nil).SaveRules), varargs...)
}

// SaveSynonym mocks base method.
func (m *MockIndexInterface) SaveSynonym(arg0 search.Synonym, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveSynonym", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSynonym indicates an expected call of SaveSynonym.
func (mr *MockIndexInterfaceMockRecorder) SaveSynonym(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSynonym", reflect.TypeOf((*MockIndexInterface)(nil).SaveSynonym), varargs...)
}

// SaveSynonyms mocks base method.
func (m *MockIndexInterface) SaveSynonyms(arg0 []search.Synonym, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveSynonyms", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSynonyms indicates an expected call of SaveSynonyms.
func (mr *MockIndexInterfaceMockRecorder) SaveSynonyms(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSynonyms", reflect.TypeOf((*MockIndexInterface)(nil).SaveSynonyms), varargs...)
}

// Search mocks base method.
func (m *MockIndexInterface) Search(arg0 string, arg1 ...interface{}) (search.QueryRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(search.QueryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockIndexInterfaceMockRecorder) Search(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIndexInterface)(nil).Search), varargs...)
}

// SearchForFacetValues mocks base method.
func (m *MockIndexInterface) SearchForFacetValues(arg0, arg1 string, arg2 ...interface{}) (search.SearchForFacetValuesRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchForFacetValues", varargs...)
	ret0, _ := ret[0].(search.SearchForFacetValuesRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForFacetValues indicates an expected call of SearchForFacetValues.
func (mr *MockIndexInterfaceMockRecorder) SearchForFacetValues(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForFacetValues", reflect.TypeOf((*MockIndexInterface)(nil).SearchForFacetValues), varargs...)
}

// SearchRules mocks base method.
func (m *MockIndexInterface) SearchRules(arg0 string, arg1 ...interface{}) (search.SearchRulesRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchRules", varargs...)
	ret0, _ := ret[0].(search.SearchRulesRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRules indicates an expected call of SearchRules.
func (mr *MockIndexInterfaceMockRecorder) SearchRules(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRules", reflect.TypeOf((*MockIndexInterface)(nil).SearchRules), varargs...)
}

// SearchSynonyms mocks base method.
func (m *MockIndexInterface) SearchSynonyms(arg0 string, arg1 ...interface{}) (search.SearchSynonymsRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSynonyms", varargs...)
	ret0, _ := ret[0].(search.SearchSynonymsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSynonyms indicates an expected call of SearchSynonyms.
func (mr *MockIndexInterfaceMockRecorder) SearchSynonyms(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSynonyms", reflect.TypeOf((*MockIndexInterface)(nil).SearchSynonyms), varargs...)
}

// SetSettings mocks base method.
func (m *MockIndexInterface) SetSettings(arg0 search.Settings, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSettings", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSettings indicates an expected call of SetSettings.
func (mr *MockIndexInterfaceMockRecorder) SetSettings(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSettings", reflect.TypeOf((*MockIndexInterface)(nil).SetSettings), varargs...)
}

// WaitTask mocks base method.
func (m *MockIndexInterface) WaitTask(arg0 int64, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitTask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitTask indicates an expected call of WaitTask.
func (mr *MockIndexInterfaceMockRecorder) WaitTask(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitTask", reflect.TypeOf((*MockIndexInterface)(nil).WaitTask), varargs...)
}
