// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/algolia/algoliasearch-client-go/v3/algolia/search (interfaces: ClientInterface)

// Package mock_search is a generated GoMock package.
package mock_search

import (
	reflect "reflect"
	time "time"

	call "github.com/algolia/algoliasearch-client-go/v3/algolia/call"
	search "github.com/algolia/algoliasearch-client-go/v3/algolia/search"
	gomock "github.com/golang/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// AddAPIKey mocks base method.
func (m *MockClientInterface) AddAPIKey(arg0 search.Key, arg1 ...interface{}) (search.CreateKeyRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAPIKey", varargs...)
	ret0, _ := ret[0].(search.CreateKeyRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAPIKey indicates an expected call of AddAPIKey.
func (mr *MockClientInterfaceMockRecorder) AddAPIKey(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAPIKey", reflect.TypeOf((*MockClientInterface)(nil).AddAPIKey), varargs...)
}

// AssignUserID mocks base method.
func (m *MockClientInterface) AssignUserID(arg0, arg1 string, arg2 ...interface{}) (search.AssignUserIDRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignUserID", varargs...)
	ret0, _ := ret[0].(search.AssignUserIDRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUserID indicates an expected call of AssignUserID.
func (mr *MockClientInterfaceMockRecorder) AssignUserID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUserID", reflect.TypeOf((*MockClientInterface)(nil).AssignUserID), varargs...)
}

// AssignUserIDs mocks base method.
func (m *MockClientInterface) AssignUserIDs(arg0 []string, arg1 string, arg2 ...interface{}) (search.AssignUserIDRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignUserIDs", varargs...)
	ret0, _ := ret[0].(search.AssignUserIDRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUserIDs indicates an expected call of AssignUserIDs.
func (mr *MockClientInterfaceMockRecorder) AssignUserIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUserIDs", reflect.TypeOf((*MockClientInterface)(nil).AssignUserIDs), varargs...)
}

// ClearDictionaryEntries mocks base method.
func (m *MockClientInterface) ClearDictionaryEntries(arg0 search.DictionaryName, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearDictionaryEntries", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearDictionaryEntries indicates an expected call of ClearDictionaryEntries.
func (mr *MockClientInterfaceMockRecorder) ClearDictionaryEntries(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDictionaryEntries", reflect.TypeOf((*MockClientInterface)(nil).ClearDictionaryEntries), varargs...)
}

// CopyIndex mocks base method.
func (m *MockClientInterface) CopyIndex(arg0, arg1 string, arg2 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyIndex", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyIndex indicates an expected call of CopyIndex.
func (mr *MockClientInterfaceMockRecorder) CopyIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyIndex", reflect.TypeOf((*MockClientInterface)(nil).CopyIndex), varargs...)
}

// CopyRules mocks base method.
func (m *MockClientInterface) CopyRules(arg0, arg1 string, arg2 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyRules", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyRules indicates an expected call of CopyRules.
func (mr *MockClientInterfaceMockRecorder) CopyRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyRules", reflect.TypeOf((*MockClientInterface)(nil).CopyRules), varargs...)
}

// CopySettings mocks base method.
func (m *MockClientInterface) CopySettings(arg0, arg1 string, arg2 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopySettings", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopySettings indicates an expected call of CopySettings.
func (mr *MockClientInterfaceMockRecorder) CopySettings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySettings", reflect.TypeOf((*MockClientInterface)(nil).CopySettings), varargs...)
}

// CopySynonyms mocks base method.
func (m *MockClientInterface) CopySynonyms(arg0, arg1 string, arg2 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopySynonyms", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopySynonyms indicates an expected call of CopySynonyms.
func (mr *MockClientInterfaceMockRecorder) CopySynonyms(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySynonyms", reflect.TypeOf((*MockClientInterface)(nil).CopySynonyms), varargs...)
}

// CustomRequest mocks base method.
func (m *MockClientInterface) CustomRequest(arg0 interface{}, arg1, arg2 string, arg3 interface{}, arg4 call.Kind, arg5 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomRequest indicates an expected call of CustomRequest.
func (mr *MockClientInterfaceMockRecorder) CustomRequest(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomRequest", reflect.TypeOf((*MockClientInterface)(nil).CustomRequest), varargs...)
}

// DeleteAPIKey mocks base method.
func (m *MockClientInterface) DeleteAPIKey(arg0 string, arg1 ...interface{}) (search.DeleteKeyRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIKey", varargs...)
	ret0, _ := ret[0].(search.DeleteKeyRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIKey(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIKey), varargs...)
}

// DeleteDictionaryEntries mocks base method.
func (m *MockClientInterface) DeleteDictionaryEntries(arg0 search.DictionaryName, arg1 []string, arg2 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDictionaryEntries", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDictionaryEntries indicates an expected call of DeleteDictionaryEntries.
func (mr *MockClientInterfaceMockRecorder) DeleteDictionaryEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDictionaryEntries", reflect.TypeOf((*MockClientInterface)(nil).DeleteDictionaryEntries), varargs...)
}

// GetAPIKey mocks base method.
func (m *MockClientInterface) GetAPIKey(arg0 string, arg1 ...interface{}) (search.Key, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIKey", varargs...)
	ret0, _ := ret[0].(search.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockClientInterfaceMockRecorder) GetAPIKey(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockClientInterface)(nil).GetAPIKey), varargs...)
}

// GetDictionarySettings mocks base method.
func (m *MockClientInterface) GetDictionarySettings(arg0 ...interface{}) (search.DictionarySettings, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDictionarySettings", varargs...)
	ret0, _ := ret[0].(search.DictionarySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDictionarySettings indicates an expected call of GetDictionarySettings.
func (mr *MockClientInterfaceMockRecorder) GetDictionarySettings(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDictionarySettings", reflect.TypeOf((*MockClientInterface)(nil).GetDictionarySettings), arg0...)
}

// GetLogs mocks base method.
func (m *MockClientInterface) GetLogs(arg0 ...interface{}) (search.GetLogsRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLogs", varargs...)
	ret0, _ := ret[0].(search.GetLogsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockClientInterfaceMockRecorder) GetLogs(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockClientInterface)(nil).GetLogs), arg0...)
}

// GetPersonalizationStrategy mocks base method.
func (m *MockClientInterface) GetPersonalizationStrategy(arg0 ...interface{}) (search.GetPersonalizationStrategyRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPersonalizationStrategy", varargs...)
	ret0, _ := ret[0].(search.GetPersonalizationStrategyRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalizationStrategy indicates an expected call of GetPersonalizationStrategy.
func (mr *MockClientInterfaceMockRecorder) GetPersonalizationStrategy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalizationStrategy", reflect.TypeOf((*MockClientInterface)(nil).GetPersonalizationStrategy), arg0...)
}

// GetSecuredAPIKeyRemainingValidity mocks base method.
func (m *MockClientInterface) GetSecuredAPIKeyRemainingValidity(arg0 string, arg1 ...interface{}) (time.Duration, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecuredAPIKeyRemainingValidity", varargs...)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecuredAPIKeyRemainingValidity indicates an expected call of GetSecuredAPIKeyRemainingValidity.
func (mr *MockClientInterfaceMockRecorder) GetSecuredAPIKeyRemainingValidity(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecuredAPIKeyRemainingValidity", reflect.TypeOf((*MockClientInterface)(nil).GetSecuredAPIKeyRemainingValidity), varargs...)
}

// GetStatus mocks base method.
func (m *MockClientInterface) GetStatus(arg0 int64, arg1 ...interface{}) (search.TaskStatusRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatus", varargs...)
	ret0, _ := ret[0].(search.TaskStatusRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockClientInterfaceMockRecorder) GetStatus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockClientInterface)(nil).GetStatus), varargs...)
}

// GetTopUserIDs mocks base method.
func (m *MockClientInterface) GetTopUserIDs(arg0 ...interface{}) (search.TopUserIDs, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopUserIDs", varargs...)
	ret0, _ := ret[0].(search.TopUserIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopUserIDs indicates an expected call of GetTopUserIDs.
func (mr *MockClientInterfaceMockRecorder) GetTopUserIDs(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopUserIDs", reflect.TypeOf((*MockClientInterface)(nil).GetTopUserIDs), arg0...)
}

// GetUserID mocks base method.
func (m *MockClientInterface) GetUserID(arg0 string, arg1 ...interface{}) (search.UserID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserID", varargs...)
	ret0, _ := ret[0].(search.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockClientInterfaceMockRecorder) GetUserID(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockClientInterface)(nil).GetUserID), varargs...)
}

// HasPendingMappings mocks base method.
func (m *MockClientInterface) HasPendingMappings(arg0 ...interface{}) (search.HasPendingMappingsRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasPendingMappings", varargs...)
	ret0, _ := ret[0].(search.HasPendingMappingsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPendingMappings indicates an expected call of HasPendingMappings.
func (mr *MockClientInterfaceMockRecorder) HasPendingMappings(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPendingMappings", reflect.TypeOf((*MockClientInterface)(nil).HasPendingMappings), arg0...)
}

// InitIndex mocks base method.
func (m *MockClientInterface) InitIndex(arg0 string) *search.Index {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitIndex", arg0)
	ret0, _ := ret[0].(*search.Index)
	return ret0
}

// InitIndex indicates an expected call of InitIndex.
func (mr *MockClientInterfaceMockRecorder) InitIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitIndex", reflect.TypeOf((*MockClientInterface)(nil).InitIndex), arg0)
}

// ListAPIKeys mocks base method.
func (m *MockClientInterface) ListAPIKeys(arg0 ...interface{}) (search.ListAPIKeysRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAPIKeys", varargs...)
	ret0, _ := ret[0].(search.ListAPIKeysRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeys indicates an expected call of ListAPIKeys.
func (mr *MockClientInterfaceMockRecorder) ListAPIKeys(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeys", reflect.TypeOf((*MockClientInterface)(nil).ListAPIKeys), arg0...)
}

// ListClusters mocks base method.
func (m *MockClientInterface) ListClusters(arg0 ...interface{}) (search.ListClustersRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].(search.ListClustersRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockClientInterfaceMockRecorder) ListClusters(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockClientInterface)(nil).ListClusters), arg0...)
}

// ListIndices mocks base method.
func (m *MockClientInterface) ListIndices(arg0 ...interface{}) (search.ListIndicesRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndices", varargs...)
	ret0, _ := ret[0].(search.ListIndicesRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndices indicates an expected call of ListIndices.
func (mr *MockClientInterfaceMockRecorder) ListIndices(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndices", reflect.TypeOf((*MockClientInterface)(nil).ListIndices), arg0...)
}

// ListUserIDs mocks base method.
func (m *MockClientInterface) ListUserIDs(arg0 ...interface{}) (search.ListUserIDsRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserIDs", varargs...)
	ret0, _ := ret[0].(search.ListUserIDsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserIDs indicates an expected call of ListUserIDs.
func (mr *MockClientInterfaceMockRecorder) ListUserIDs(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserIDs", reflect.TypeOf((*MockClientInterface)(nil).ListUserIDs), arg0...)
}

// MoveIndex mocks base method.
func (m *MockClientInterface) MoveIndex(arg0, arg1 string, arg2 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveIndex", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveIndex indicates an expected call of MoveIndex.
func (mr *MockClientInterfaceMockRecorder) MoveIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveIndex", reflect.TypeOf((*MockClientInterface)(nil).MoveIndex), varargs...)
}

// MultipleBatch mocks base method.
func (m *MockClientInterface) MultipleBatch(arg0 []search.BatchOperationIndexed, arg1 ...interface{}) (search.MultipleBatchRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultipleBatch", varargs...)
	ret0, _ := ret[0].(search.MultipleBatchRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleBatch indicates an expected call of MultipleBatch.
func (mr *MockClientInterfaceMockRecorder) MultipleBatch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleBatch", reflect.TypeOf((*MockClientInterface)(nil).MultipleBatch), varargs...)
}

// MultipleGetObjects mocks base method.
func (m *MockClientInterface) MultipleGetObjects(arg0 []search.IndexedGetObject, arg1 interface{}, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultipleGetObjects", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipleGetObjects indicates an expected call of MultipleGetObjects.
func (mr *MockClientInterfaceMockRecorder) MultipleGetObjects(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleGetObjects", reflect.TypeOf((*MockClientInterface)(nil).MultipleGetObjects), varargs...)
}

// MultipleQueries mocks base method.
func (m *MockClientInterface) MultipleQueries(arg0 []search.IndexedQuery, arg1 string, arg2 ...interface{}) (search.MultipleQueriesRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultipleQueries", varargs...)
	ret0, _ := ret[0].(search.MultipleQueriesRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleQueries indicates an expected call of MultipleQueries.
func (mr *MockClientInterfaceMockRecorder) MultipleQueries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleQueries", reflect.TypeOf((*MockClientInterface)(nil).MultipleQueries), varargs...)
}

// RemoveUserID mocks base method.
func (m *MockClientInterface) RemoveUserID(arg0 string, arg1 ...interface{}) (search.RemoveUserIDRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUserID", varargs...)
	ret0, _ := ret[0].(search.RemoveUserIDRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserID indicates an expected call of RemoveUserID.
func (mr *MockClientInterfaceMockRecorder) RemoveUserID(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserID", reflect.TypeOf((*MockClientInterface)(nil).RemoveUserID), varargs...)
}

// ReplaceDictionaryEntries mocks base method.
func (m *MockClientInterface) ReplaceDictionaryEntries(arg0 search.DictionaryName, arg1 []search.DictionaryEntry, arg2 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplaceDictionaryEntries", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceDictionaryEntries indicates an expected call of ReplaceDictionaryEntries.
func (mr *MockClientInterfaceMockRecorder) ReplaceDictionaryEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceDictionaryEntries", reflect.TypeOf((*MockClientInterface)(nil).ReplaceDictionaryEntries), varargs...)
}

// RestoreAPIKey mocks base method.
func (m *MockClientInterface) RestoreAPIKey(arg0 string, arg1 ...interface{}) (search.RestoreKeyRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreAPIKey", varargs...)
	ret0, _ := ret[0].(search.RestoreKeyRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAPIKey indicates an expected call of RestoreAPIKey.
func (mr *MockClientInterfaceMockRecorder) RestoreAPIKey(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAPIKey", reflect.TypeOf((*MockClientInterface)(nil).RestoreAPIKey), varargs...)
}

// SaveDictionaryEntries mocks base method.
func (m *MockClientInterface) SaveDictionaryEntries(arg0 search.DictionaryName, arg1 []search.DictionaryEntry, arg2 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveDictionaryEntries", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveDictionaryEntries indicates an expected call of SaveDictionaryEntries.
func (mr *MockClientInterfaceMockRecorder) SaveDictionaryEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDictionaryEntries", reflect.TypeOf((*MockClientInterface)(nil).SaveDictionaryEntries), varargs...)
}

// SearchDictionaryEntries mocks base method.
func (m *MockClientInterface) SearchDictionaryEntries(arg0 search.DictionaryName, arg1 string, arg2 ...interface{}) (search.SearchDictionariesRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchDictionaryEntries", varargs...)
	ret0, _ := ret[0].(search.SearchDictionariesRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDictionaryEntries indicates an expected call of SearchDictionaryEntries.
func (mr *MockClientInterfaceMockRecorder) SearchDictionaryEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDictionaryEntries", reflect.TypeOf((*MockClientInterface)(nil).SearchDictionaryEntries), varargs...)
}

// SearchUserIDs mocks base method.
func (m *MockClientInterface) SearchUserIDs(arg0 string, arg1 ...interface{}) (search.SearchUserIDRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchUserIDs", varargs...)
	ret0, _ := ret[0].(search.SearchUserIDRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserIDs indicates an expected call of SearchUserIDs.
func (mr *MockClientInterfaceMockRecorder) SearchUserIDs(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserIDs", reflect.TypeOf((*MockClientInterface)(nil).SearchUserIDs), varargs...)
}

// SetDictionarySettings mocks base method.
func (m *MockClientInterface) SetDictionarySettings(arg0 search.DictionarySettings, arg1 ...interface{}) (search.UpdateTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDictionarySettings", varargs...)
	ret0, _ := ret[0].(search.UpdateTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDictionarySettings indicates an expected call of SetDictionarySettings.
func (mr *MockClientInterfaceMockRecorder) SetDictionarySettings(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDictionarySettings", reflect.TypeOf((*MockClientInterface)(nil).SetDictionarySettings), varargs...)
}

// SetPersonalizationStrategy mocks base method.
func (m *MockClientInterface) SetPersonalizationStrategy(arg0 search.Strategy, arg1 ...interface{}) (search.SetPersonalizationStrategyRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetPersonalizationStrategy", varargs...)
	ret0, _ := ret[0].(search.SetPersonalizationStrategyRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPersonalizationStrategy indicates an expected call of SetPersonalizationStrategy.
func (mr *MockClientInterfaceMockRecorder) SetPersonalizationStrategy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPersonalizationStrategy", reflect.TypeOf((*MockClientInterface)(nil).SetPersonalizationStrategy), varargs...)
}

// UpdateAPIKey mocks base method.
func (m *MockClientInterface) UpdateAPIKey(arg0 search.Key, arg1 ...interface{}) (search.UpdateKeyRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAPIKey", varargs...)
	ret0, _ := ret[0].(search.UpdateKeyRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockClientInterfaceMockRecorder) UpdateAPIKey(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockClientInterface)(nil).UpdateAPIKey), varargs...)
}

// WaitTask mocks base method.
func (m *MockClientInterface) WaitTask(arg0 int64, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitTask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitTask indicates an expected call of WaitTask.
func (mr *MockClientInterfaceMockRecorder) WaitTask(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitTask", reflect.TypeOf((*MockClientInterface)(nil).WaitTask), varargs...)
}
